[{"/media/charles/Files/Projects/crypto-jumbo/src/index.tsx":"1","/media/charles/Files/Projects/crypto-jumbo/src/reportWebVitals.ts":"2","/media/charles/Files/Projects/crypto-jumbo/src/App.tsx":"3","/media/charles/Files/Projects/crypto-jumbo/src/pages/index.tsx":"4","/media/charles/Files/Projects/crypto-jumbo/src/pages/Home/index.tsx":"5","/media/charles/Files/Projects/crypto-jumbo/src/pages/components/index.ts":"6","/media/charles/Files/Projects/crypto-jumbo/src/components/index.ts":"7","/media/charles/Files/Projects/crypto-jumbo/src/components/Navigation/index.tsx":"8","/media/charles/Files/Projects/crypto-jumbo/src/components/PrivateRoute/index.tsx":"9","/media/charles/Files/Projects/crypto-jumbo/src/components/AvailableCoins/index.tsx":"10","/media/charles/Files/Projects/crypto-jumbo/src/utils/index.ts":"11","/media/charles/Files/Projects/crypto-jumbo/src/utils/formats/index.ts":"12","/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/index.tsx":"13","/media/charles/Files/Projects/crypto-jumbo/src/components/Form/index.ts":"14","/media/charles/Files/Projects/crypto-jumbo/src/components/Form/inputs.tsx":"15","/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/login.tsx":"16","/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/signup.tsx":"17","/media/charles/Files/Projects/crypto-jumbo/src/components/Footer/index.tsx":"18","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/index.tsx":"19","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Profile/index.tsx":"20","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Overview/index.tsx":"21","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Wallet/index.tsx":"22","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Trade/index.tsx":"23","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/index.ts":"24","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/NavigationBar/index.tsx":"25","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/TradeCoin/index.tsx":"26","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/Asset/index.tsx":"27","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/TransactionCard/index.tsx":"28","/media/charles/Files/Projects/crypto-jumbo/src/utils/theme.ts":"29"},{"size":756,"mtime":1607663649244,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1606454126242,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1607399575703,"results":"33","hashOfConfig":"31"},{"size":569,"mtime":1607399517273,"results":"34","hashOfConfig":"31"},{"size":6634,"mtime":1607724460276,"results":"35","hashOfConfig":"31"},{"size":34,"mtime":1606563823160,"results":"36","hashOfConfig":"31"},{"size":219,"mtime":1607723898462,"results":"37","hashOfConfig":"31"},{"size":1290,"mtime":1607315195894,"results":"38","hashOfConfig":"31"},{"size":934,"mtime":1606566019834,"results":"39","hashOfConfig":"31"},{"size":2620,"mtime":1606689054280,"results":"40","hashOfConfig":"31"},{"size":52,"mtime":1607663395963,"results":"41","hashOfConfig":"31"},{"size":207,"mtime":1606684014837,"results":"42","hashOfConfig":"31"},{"size":1642,"mtime":1607056110085,"results":"43","hashOfConfig":"31"},{"size":26,"mtime":1607049988056,"results":"44","hashOfConfig":"31"},{"size":2729,"mtime":1607051062215,"results":"45","hashOfConfig":"31"},{"size":2558,"mtime":1607051639501,"results":"46","hashOfConfig":"31"},{"size":2449,"mtime":1607051914362,"results":"47","hashOfConfig":"31"},{"size":2670,"mtime":1607054911261,"results":"48","hashOfConfig":"31"},{"size":927,"mtime":1607578982647,"results":"49","hashOfConfig":"31"},{"size":121,"mtime":1607314705207,"results":"50","hashOfConfig":"31"},{"size":3136,"mtime":1607645150358,"results":"51","hashOfConfig":"31"},{"size":119,"mtime":1607314732058,"results":"52","hashOfConfig":"31"},{"size":2728,"mtime":1607671027012,"results":"53","hashOfConfig":"31"},{"size":189,"mtime":1607637489922,"results":"54","hashOfConfig":"31"},{"size":2350,"mtime":1607318411309,"results":"55","hashOfConfig":"31"},{"size":2891,"mtime":1607659635166,"results":"56","hashOfConfig":"31"},{"size":1324,"mtime":1607634350582,"results":"57","hashOfConfig":"31"},{"size":2029,"mtime":1607644987032,"results":"58","hashOfConfig":"31"},{"size":785,"mtime":1607663366904,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"oe5ah3",{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/media/charles/Files/Projects/crypto-jumbo/src/index.tsx",[],[],"/media/charles/Files/Projects/crypto-jumbo/src/reportWebVitals.ts",["128"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/media/charles/Files/Projects/crypto-jumbo/src/App.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Home/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/components/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/components/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/components/Navigation/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/components/PrivateRoute/index.tsx",["129","130","131","132","133","134"],"import React, { useEffect, useLayoutEffect } from 'react';\nimport { Route, Redirect, useHistory } from 'react-router-dom';\n// import { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\n\ninterface PrivateRouteProps {\n  component: any;\n  path: string;\n  redirectedPath?: string;\n}\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({\n  component: Comp,\n  path,\n  redirectedPath = '/login',\n  ...rest\n}): JSX.Element => {\n  const token = true;\n  return (\n    <Route\n      path={path}\n      {...rest}\n      render={(props) => {\n        return token ? (\n          <Comp {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: redirectedPath,\n              state: {\n                prevLocation: location.pathname,\n                error: 'Unauthorized Access!',\n              },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default PrivateRoute;\n","/media/charles/Files/Projects/crypto-jumbo/src/components/AvailableCoins/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/utils/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/utils/formats/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/components/Form/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/components/Form/inputs.tsx",["135"],"import React, { useState, memo } from 'react';\nimport {\n  FormControl,\n  FormControlProps,\n  FormLabel,\n  Input,\n  FormHelperText,\n  Box,\n  Select as ChakraSelect,\n  SelectProps as ChakraSelectProps,\n  Text,\n} from '@chakra-ui/react';\nimport ClipLoader from 'react-spinners/ClipLoader';\n\nexport interface GlobalProps\n  extends Pick<React.HTMLAttributes<HTMLInputElement>, 'onChange'> {\n  formHelperText?: string;\n  name: string;\n  value: string;\n  label?: string;\n  placeholder?: string;\n}\nexport type FormInputProps = GlobalProps &\n  FormControlProps & {\n    type?: string;\n    labelClassName?: string;\n  };\nexport const FormInput: React.FC<FormInputProps> = memo(\n  ({\n    formHelperText,\n    type = 'text',\n    name,\n    value,\n    label,\n    placeholder,\n    errorText,\n    onChange,\n    labelClassName,\n    ...rest\n  }) => {\n    return (\n      <FormControl mb={5} {...rest}>\n        <FormLabel\n          htmlFor={name}\n          className={`color-gray-text font-weight-400 ${labelClassName}`}>\n          {label}\n        </FormLabel>\n        <Input\n          type={type}\n          value={value}\n          name={name}\n          id={name}\n          placeholder={placeholder}\n          aria-describedby={`${name}-helper-text`}\n          onChange={onChange}\n        />\n        <Text as=\"p\" className=\"color-error font-weight-500 font-sm\">\n          {errorText}\n        </Text>\n        <FormHelperText id={`${name}-helper-text`}>{formHelperText}</FormHelperText>\n      </FormControl>\n    );\n  },\n  (prev, next) => prev.value === next.value,\n);\n\ndeclare interface SelectProps extends ChakraSelectProps {\n  label?: string;\n  options: string[];\n}\nexport const Select: React.FC<SelectProps> = ({\n  label,\n  options,\n  ...rest\n}): JSX.Element => {\n  return (\n    <Box mb={5}>\n      <Text as=\"label\" className=\"font-weight-500 font-sm margin-bottom-xs\">\n        {label}\n      </Text>\n      <ChakraSelect {...rest} _placeholder={{ color: 'color-gray-text' }}>\n        {options.map((option) => (\n          <option key={option} value={option}>\n            {option}\n          </option>\n        ))}\n      </ChakraSelect>\n    </Box>\n  );\n};\n\ndeclare interface SubmitButtonProps\n  extends Omit<React.HTMLAttributes<HTMLButtonElement>, 'onClick'> {\n  action: () => void;\n  loading?: boolean;\n  disabled?: boolean;\n}\nexport const SubmitButton: React.FC<SubmitButtonProps> = ({\n  children,\n  action,\n  loading,\n  disabled,\n}): JSX.Element => {\n  return (\n    <Box\n      as=\"button\"\n      width=\"full\"\n      type=\"button\"\n      textAlign=\"center\"\n      className=\"bg-primary color-white btn\"\n      onClick={action}\n      disabled={disabled}>\n      {!loading ? children : <ClipLoader size={20} color=\"#fff\" loading={loading} />}\n    </Box>\n  );\n};\n",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/login.tsx",["136","137"],"import React from 'react';\nimport { SubmitButton, FormInput } from '../components';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Text, Flex, Box } from '@chakra-ui/react';\nimport { AuthProps } from './types';\n\nexport type LoginProps = AuthProps;\nconst Login: React.FC<AuthProps> = ({ setState }): JSX.Element => {\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      email: '',\n    },\n    validationSchema: yup.object({\n      email: yup.string().email('Invalid email address').required('Required'),\n      password: yup\n        .string()\n        .test('len', 'Password too short', (len) => (len ? len.length >= 8 : false)),\n    }),\n\n    onSubmit: ({ email, password }) => {\n      // loginRequest({ email, password });\n    },\n  });\n  return (\n    <Box>\n      <Flex direction=\"column\" justify=\"center\" align=\"center\" mb={5}>\n        <Text\n          as=\"h2\"\n          mb={3}\n          className=\"capitalize color-blue-medium font-md font-weight-600\">\n          Welcome Back\n        </Text>\n        <Text className=\"capitalize color-gray-text font-sm\">Login</Text>\n      </Flex>\n      <Flex direction=\"column\" align=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormInput\n            {...formik.getFieldProps('email')}\n            placeholder=\"email@example.com\"\n            label=\"Email\"\n            isRequired\n            labelClassName=\"color-blue-medium\"\n          />\n          <FormInput\n            {...formik.getFieldProps('password')}\n            placeholder=\"Password\"\n            type=\"password\"\n            label=\"Password\"\n            isRequired\n            labelClassName=\"color-primary\"\n          />\n          <Flex justify=\"flex-end\">\n            <Box\n              as=\"button\"\n              type=\"button\"\n              className=\"color-gray-text font-sm\"\n              mb={2}\n              onClick={() => setState('forgot-password')}>\n              Forgot Password?\n            </Box>\n          </Flex>\n          <SubmitButton\n            // loading={loading}\n            disabled={!(formik.isValid && formik.dirty)}\n            action={formik.handleSubmit}>\n            Login\n          </SubmitButton>\n        </form>\n        <Text className=\"color-gray-text font-weight-400 font-sm padding-vertical-sm\">\n          New here?{' '}\n          <button\n            onClick={() => setState('signup')}\n            type=\"button\"\n            className=\"font-weight-500\">\n            Sign up\n          </button>\n        </Text>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default Login;\n","/media/charles/Files/Projects/crypto-jumbo/src/pages/auth/signup.tsx",["138","139"],"import React from 'react';\nimport { SubmitButton, FormInput } from '../components';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { Text, Flex, Box } from '@chakra-ui/react';\nimport { AuthProps } from './types';\n\nexport type SignUpProps = AuthProps;\nconst SignUp: React.FC<AuthProps> = ({ setState }): JSX.Element => {\n  const formik = useFormik({\n    initialValues: {\n      password: '',\n      email: '',\n    },\n    validationSchema: yup.object({\n      email: yup.string().email().required('Email is required'),\n      password: yup\n        .string()\n        .test('len', 'Password too short', (len) => (len ? len.length >= 8 : false)),\n    }),\n\n    onSubmit: ({ email, password }) => {\n      // loginRequest({ email, password });\n    },\n  });\n  return (\n    <Box>\n      <Flex direction=\"column\" justify=\"center\" align=\"center\" mb={5}>\n        <Text\n          as=\"h2\"\n          mb={3}\n          className=\"capitalize color-blue-medium font-md font-weight-600\">\n          Let’s get started\n        </Text>\n        <Text className=\"capitalize color-gray-text font-sm\">Signup</Text>\n      </Flex>\n      <Flex direction=\"column\" align=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormInput\n            {...formik.getFieldProps('email')}\n            placeholder=\"email@example.com\"\n            label=\"Email\"\n            isRequired\n            labelClassName=\"color-blue-medium\"\n          />\n          <FormInput\n            {...formik.getFieldProps('password')}\n            placeholder=\"Password\"\n            type=\"password\"\n            label=\"Password\"\n            isRequired\n            labelClassName=\"color-primary\"\n          />\n          <Flex justify=\"flex-end\">\n            <button type=\"button\" onClick={() => setState('forgot-password')}>\n              Forgot Password?\n            </button>\n          </Flex>\n          <SubmitButton\n            // loading={loading}\n            disabled={!(formik.isValid && formik.dirty)}\n            action={formik.handleSubmit}>\n            SignUp\n          </SubmitButton>\n        </form>\n        <Text className=\"color-gray-text font-weight-400 font-sm padding-vertical-sm\">\n          Already have an account?{' '}\n          <button\n            onClick={() => setState('login')}\n            type=\"button\"\n            className=\"font-weight-500\">\n            Login\n          </button>\n        </Text>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default SignUp;\n","/media/charles/Files/Projects/crypto-jumbo/src/components/Footer/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Profile/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Overview/index.tsx",["140"],"import React from 'react';\nimport { Box, Flex, Text, Center } from '@chakra-ui/react';\nimport { FiCheckCircle } from 'react-icons/fi';\nimport { HiOutlineExclamationCircle } from 'react-icons/hi';\nimport { FaRegTimesCircle } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport btc from '../../../assets/bitcoin.png';\nimport etherum from '../../../assets/etherum.png';\nimport usdt from '../../../assets/udth.png';\nimport naira from '../../../assets/naira.png';\n\nimport {\n  TradeCoinProps,\n  TradeCoin,\n  SwapCoin,\n  AssetProps,\n  Asset,\n  TransactionCardProps,\n  TransactionCard,\n} from '../components';\n\nconst icons: any = {\n  processing: HiOutlineExclamationCircle,\n  success: FiCheckCircle,\n  failed: FaRegTimesCircle,\n};\nconst Overview: React.FC = (): JSX.Element => {\n  const tradableCoins: TradeCoinProps[] = [\n    { logo: btc, symbol: 'BTC' },\n    { logo: etherum, symbol: 'ETH' },\n    { logo: usdt, symbol: 'USDT' },\n  ];\n\n  const assets: AssetProps[] = [\n    { currency: 'Naira', symbol: 'NGN', balance: '235000', logo: naira },\n    { currency: 'Bitcoin', symbol: 'BTC', balance: '0.0005000', logo: btc },\n    { currency: 'Etherum', symbol: 'ETH', balance: '6152', logo: etherum },\n    { currency: 'Tether', symbol: 'USDT', balance: '215', logo: usdt },\n  ];\n\n  const transactions: TransactionCardProps[] = [\n    {\n      amount: '0.0045334',\n      coin: 'ETH',\n      type: 'buy',\n      status: 'processing',\n      transId: '23456cy8u3354',\n    },\n    {\n      amount: '0.0045334',\n      coin: 'BTC',\n      type: 'sell',\n      status: 'success',\n      transId: '23456cy8u3354',\n    },\n    {\n      amount: '0.0045334',\n      coin: 'ETH',\n      type: 'buy',\n      status: 'processing',\n      transId: '23456cy8u3354',\n    },\n  ];\n  return (\n    <Box>\n      <Flex flexWrap=\"wrap\" mb={6}>\n        {tradableCoins.map((coin) => (\n          <TradeCoin key={coin.symbol} {...coin} />\n        ))}\n        <SwapCoin initialCoinlogo={usdt} finalCoinLogo={etherum} />\n      </Flex>\n      <Box mb={6}>\n        <Flex align=\"center\" mb={3}>\n          <Text className=\"font-weight-500 font-md\" mr={4}>\n            Your assets\n          </Text>\n          <Box flex={1} height=\"1px\" className=\"bg-gray\" />\n        </Flex>\n        <Flex flexWrap=\"wrap\">\n          {assets.map((asset) => (\n            <Asset key={asset.symbol} {...asset} />\n          ))}\n        </Flex>\n      </Box>\n      <Box mb={6}>\n        <Flex align=\"center\" mb={3}>\n          <Text className=\"font-weight-500 font-md\" mr={4}>\n            Transactions\n          </Text>\n          <Box flex={1} height=\"1px\" className=\"bg-gray\" />\n        </Flex>\n        <Flex flexWrap=\"wrap\" flexDirection={{ base: 'column', sm: 'row' }}>\n          {transactions.map((asset, index) => (\n            <TransactionCard key={index} {...asset} icon={icons[asset.status]} />\n          ))}\n          <Center flex={1}>\n            <Link\n              to=\"/dashboard/transactions\"\n              className=\"font-sm color-primary font-weight-500\">\n              View all\n            </Link>\n          </Center>\n        </Flex>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Overview;\n","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Wallet/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/Trade/index.tsx",["141"],"import React, { useState } from 'react';\nimport { Flex, Box, Image, Text, AspectRatio, ButtonGroup } from '@chakra-ui/react';\nimport bitcoin from '../../../assets/bitcoin.png';\nimport eth from '../../../assets/etherum.png';\nimport usdt from '../../../assets/udth.png';\nconst Trade: React.FC = (): JSX.Element => {\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n  return (\n    <Flex direction=\"column\" justify=\"center\" align=\"center\" flex={1}>\n      <Flex className=\"trade\">\n        <Flex direction=\"column\" flex={2} className=\"trade-sidebar\">\n          <Flex direction=\"column\" justify=\"center\" align=\"center\" flex={1}>\n            <Image\n              src={bitcoin}\n              width={{ base: '25px', md: '43px' }}\n              height={{ base: '25px', md: '43px' }}\n              objectFit=\"cover\"\n            />\n            <Text className=\"font-md color-gray-text font-weight-500\">BTC</Text>\n          </Flex>\n          <Flex direction=\"column\" justify=\"center\" align=\"center\" flex={1}>\n            <Image\n              src={eth}\n              width={{ base: '25px', md: '43px' }}\n              height={{ base: '25px', md: '43px' }}\n              objectFit=\"cover\"\n            />\n            <Text className=\"font-md color-gray-text font-weight-500\">ETH</Text>\n          </Flex>\n          <Flex direction=\"column\" justify=\"center\" align=\"center\" flex={1}>\n            <Image\n              src={usdt}\n              width={{ base: '25px', md: '43px' }}\n              height={{ base: '25px', md: '43px' }}\n              objectFit=\"cover\"\n            />\n            <Text className=\"font-md color-gray-text font-weight-500\">USDT</Text>\n          </Flex>\n        </Flex>\n        <Box flex={7} p={5} className=\"bg-white\">\n          <Flex direction=\"column\" justify=\"center\" align=\"center\">\n            <ButtonGroup p={2} className=\"trade-type-btn-group\" mb={5}>\n              <Box\n                as=\"button\"\n                px={5}\n                py=\"1px\"\n                onClick={() => setTradeType('buy')}\n                className={`border-radius-xs ${\n                  tradeType === 'buy' ? 'bg-primary color-white' : 'color-primary'\n                }`}>\n                Buy\n              </Box>\n              <Box\n                as=\"button\"\n                px={3}\n                py={2}\n                onClick={() => setTradeType('sell')}\n                className={`border-radius-xs ${\n                  tradeType === 'sell' ? 'bg-primary color-white' : 'color-primary'\n                }`}>\n                Sell\n              </Box>\n            </ButtonGroup>\n            <Text>Buy #231 | Sell #341</Text>\n          </Flex>\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Trade;\n","/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/index.ts",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/NavigationBar/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/TradeCoin/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/Asset/index.tsx",[],"/media/charles/Files/Projects/crypto-jumbo/src/pages/Dashboard/components/TransactionCard/index.tsx",["142"],"import React from 'react';\nimport { Flex, Square, Text, Box } from '@chakra-ui/react';\nimport { IconType } from 'react-icons';\n\nexport declare interface TransactionCardProps {\n  icon?: IconType;\n  status: 'processing' | 'failed' | 'success';\n  coin: string;\n  type: 'buy' | 'sell';\n  transId: string;\n  amount: string;\n}\nexport const TransactionCard: React.FC<TransactionCardProps> = ({\n  icon: Icon,\n  status,\n  coin,\n  type,\n  transId,\n  amount,\n}): JSX.Element => {\n  const statusBadge: any = {\n    success: {\n      bg: 'bg-success-transparent',\n      color: 'color-success',\n    },\n    processing: {\n      bg: 'bg-warning-transparent',\n      color: 'color-warning',\n    },\n    failed: {\n      bg: 'bg-danger-transparent',\n      color: 'color-danger',\n    },\n  };\n  return (\n    <Flex\n      flex={1}\n      flexBasis={{ base: '100%', sm: '48%', md: '24%' }}\n      maxWidth={{ base: '100%', sm: '48%', md: '24%' }}\n      className=\"bg-white\"\n      p={2}\n      mr={{ base: 0, sm: '1%' }}\n      mb={{ base: '2%', md: 0 }}\n      borderRadius={5}\n      boxShadow=\"0px 5px 20px rgba(20, 102, 204, 0.15)\">\n      <Square mr={2} className={`${statusBadge[status].bg}`} size=\"40px\">\n        {Icon && <Icon size={20} className={`${statusBadge[status].color}`} />}\n      </Square>\n      <Box flex={1}>\n        <Flex justify=\"space-between\">\n          <Flex className=\"color-gray-text font-xs font-weight-500\" flex={0.4}>\n            <Text className=\"uppercase\" mr={2}>\n              {coin} -\n            </Text>\n            <Text className=\"capitalize\">{type}</Text>\n          </Flex>\n          <Text className=\"color-gray-text font-xs text-overflow-1\" flex={0.6}>\n            {transId}\n          </Text>\n        </Flex>\n        <Flex justify=\"space-between\">\n          <Text className=\"color-gray-text font-xs\" flex={1} mr={2}>\n            {amount} {coin} - {status}\n          </Text>\n          <Text className=\"color-gray-text font-xs\" flex={0.4}>\n            12th July\n          </Text>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n","/media/charles/Files/Projects/crypto-jumbo/src/utils/theme.ts",[],{"ruleId":"143","severity":1,"message":"144","line":3,"column":25,"nodeType":"145","messageId":"146","endLine":3,"endColumn":57},{"ruleId":"147","severity":1,"message":"148","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":26},{"ruleId":"147","severity":1,"message":"151","line":1,"column":28,"nodeType":"149","messageId":"150","endLine":1,"endColumn":43},{"ruleId":"147","severity":1,"message":"152","line":2,"column":27,"nodeType":"149","messageId":"150","endLine":2,"endColumn":37},{"ruleId":"147","severity":1,"message":"153","line":4,"column":10,"nodeType":"149","messageId":"150","endLine":4,"endColumn":28},{"ruleId":"147","severity":1,"message":"154","line":4,"column":30,"nodeType":"149","messageId":"150","endLine":4,"endColumn":38},{"ruleId":"155","severity":1,"message":"156","line":7,"column":14,"nodeType":"157","messageId":"158","endLine":7,"endColumn":17,"suggestions":"159"},{"ruleId":"147","severity":1,"message":"160","line":1,"column":17,"nodeType":"149","messageId":"150","endLine":1,"endColumn":25},{"ruleId":"147","severity":1,"message":"161","line":22,"column":18,"nodeType":"149","messageId":"150","endLine":22,"endColumn":23},{"ruleId":"147","severity":1,"message":"162","line":22,"column":25,"nodeType":"149","messageId":"150","endLine":22,"endColumn":33},{"ruleId":"147","severity":1,"message":"161","line":22,"column":18,"nodeType":"149","messageId":"150","endLine":22,"endColumn":23},{"ruleId":"147","severity":1,"message":"162","line":22,"column":25,"nodeType":"149","messageId":"150","endLine":22,"endColumn":33},{"ruleId":"155","severity":1,"message":"156","line":22,"column":14,"nodeType":"157","messageId":"158","endLine":22,"endColumn":17,"suggestions":"163"},{"ruleId":"147","severity":1,"message":"164","line":2,"column":34,"nodeType":"149","messageId":"150","endLine":2,"endColumn":45},{"ruleId":"155","severity":1,"message":"156","line":21,"column":22,"nodeType":"157","messageId":"158","endLine":21,"endColumn":25,"suggestions":"165"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","'useHistory' is defined but never used.","'bindActionCreators' is defined but never used.","'Dispatch' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["166","167"],"'useState' is defined but never used.","'email' is defined but never used.","'password' is defined but never used.",["168","169"],"'AspectRatio' is defined but never used.",["170","171"],{"messageId":"172","fix":"173","desc":"174"},{"messageId":"175","fix":"176","desc":"177"},{"messageId":"172","fix":"178","desc":"174"},{"messageId":"175","fix":"179","desc":"177"},{"messageId":"172","fix":"180","desc":"174"},{"messageId":"175","fix":"181","desc":"177"},"suggestUnknown",{"range":"182","text":"183"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"182","text":"184"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"185","text":"183"},{"range":"185","text":"184"},{"range":"186","text":"183"},{"range":"186","text":"184"},[263,266],"unknown","never",[635,638],[490,493]]